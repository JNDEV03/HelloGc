{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGA\\\\Desktop\\\\eletype-frontend-main\\\\src\\\\components\\\\features\\\\TypeBox\\\\TypeBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { wordsGenerator, chineseWordsGenerator } from \"../../../scripts/wordsGenerator\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport IconButton from \"../../utils/IconButton\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport useLocalPersistState from \"../../../hooks/useLocalPersistState\";\nimport CapsLockSnackbar from \"../CapsLockSnackbar\";\nimport Stats from \"./Stats\";\nimport { Dialog } from \"@mui/material\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { DEFAULT_COUNT_DOWN, COUNT_DOWN_90, COUNT_DOWN_60, COUNT_DOWN_30, COUNT_DOWN_15, DEFAULT_WORDS_COUNT, DEFAULT_DIFFICULTY, HARD_DIFFICULTY, DEFAULT_DIFFICULTY_TOOLTIP_TITLE, HARD_DIFFICULTY_TOOLTIP_TITLE, ENGLISH_MODE, CHINESE_MODE, ENGLISH_MODE_TOOLTIP_TITLE, CHINESE_MODE_TOOLTIP_TITLE, DEFAULT_DIFFICULTY_TOOLTIP_TITLE_CHINESE, HARD_DIFFICULTY_TOOLTIP_TITLE_CHINESE, RESTART_BUTTON_TOOLTIP_TITLE, PACING_CARET, PACING_PULSE, PACING_CARET_TOOLTIP, PACING_PULSE_TOOLTIP } from \"../../../constants/Constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TypeBox = _ref => {\n  _s();\n\n  let {\n    textInputRef,\n    isFocusedMode,\n    handleInputFocus\n  } = _ref;\n  // local persist timer\n  const [countDownConstant, setCountDownConstant] = useLocalPersistState(DEFAULT_COUNT_DOWN, \"timer-constant\"); // local persist pacing style\n\n  const [pacingStyle, setPacingStyle] = useLocalPersistState(PACING_PULSE, \"pacing-style\"); // local persist difficulty\n\n  const [difficulty, setDifficulty] = useLocalPersistState(DEFAULT_DIFFICULTY, \"difficulty\"); // local persist difficulty\n\n  const [language, setLanguage] = useLocalPersistState(ENGLISH_MODE, \"language\"); // Caps Lock\n\n  const [capsLocked, setCapsLocked] = useState(false); // tab-enter restart dialog\n\n  const [openRestart, setOpenRestart] = useState(false);\n\n  const EnterkeyPressReset = e => {\n    // press enter/or tab to reset;\n    if (e.keyCode === 13 || e.keyCode === 9) {\n      e.preventDefault();\n      setOpenRestart(false);\n      reset(countDownConstant, difficulty, language);\n    } else {\n      e.preventDefault();\n      setOpenRestart(false);\n    }\n  };\n\n  const handleTabKeyOpen = () => {\n    setOpenRestart(true);\n  }; // set up words state\n\n\n  const [wordsDict, setWordsDict] = useState(() => {\n    if (language === ENGLISH_MODE) {\n      return wordsGenerator(DEFAULT_WORDS_COUNT, difficulty, ENGLISH_MODE);\n    }\n\n    if (language === CHINESE_MODE) {\n      return chineseWordsGenerator(difficulty, CHINESE_MODE);\n    }\n  });\n  const words = useMemo(() => {\n    return wordsDict.map(e => e.val);\n  }, [wordsDict]);\n  const wordsKey = useMemo(() => {\n    return wordsDict.map(e => e.key);\n  }, [wordsDict]);\n  const wordSpanRefs = useMemo(() => Array(words.length).fill(0).map(i => /*#__PURE__*/React.createRef()), [words]); // set up timer state\n\n  const [countDown, setCountDown] = useState(countDownConstant);\n  const [intervalId, setIntervalId] = useState(null); // set up game loop status state\n\n  const [status, setStatus] = useState(\"waiting\"); // enable menu\n\n  const menuEnabled = !isFocusedMode || status === \"finished\"; // set up hidden input input val state\n\n  const [currInput, setCurrInput] = useState(\"\"); // set up world advancing index\n\n  const [currWordIndex, setCurrWordIndex] = useState(0); // set up char advancing index\n\n  const [currCharIndex, setCurrCharIndex] = useState(-1);\n  const [prevInput, setPrevInput] = useState(\"\"); // set up words examine history\n\n  const [wordsCorrect, setWordsCorrect] = useState(new Set());\n  const [wordsInCorrect, setWordsInCorrect] = useState(new Set());\n  const [inputWordsHistory, setInputWordsHistory] = useState({}); // setup stats\n\n  const [rawKeyStrokes, setRawKeyStrokes] = useState(0);\n  const [wpmKeyStrokes, setWpmKeyStrokes] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [statsCharCount, setStatsCharCount] = useState([]); // set up char examine hisotry\n\n  const [history, setHistory] = useState({});\n  const keyString = currWordIndex + \".\" + currCharIndex;\n  const [currChar, setCurrChar] = useState(\"\");\n  useEffect(() => {\n    if (currWordIndex === DEFAULT_WORDS_COUNT - 1) {\n      if (language === ENGLISH_MODE) {\n        const generatedEng = wordsGenerator(DEFAULT_WORDS_COUNT, difficulty, ENGLISH_MODE);\n        setWordsDict(currentArray => [...currentArray, ...generatedEng]);\n      }\n\n      if (language === CHINESE_MODE) {\n        const generatedChinese = chineseWordsGenerator(difficulty, CHINESE_MODE);\n        setWordsDict(currentArray => [...currentArray, ...generatedChinese]);\n      }\n    }\n\n    if (currWordIndex !== 0 && wordSpanRefs[currWordIndex].current.offsetLeft < wordSpanRefs[currWordIndex - 1].current.offsetLeft) {\n      wordSpanRefs[currWordIndex - 1].current.scrollIntoView();\n    } else {\n      return;\n    }\n  }, [currWordIndex, wordSpanRefs, difficulty, language]);\n\n  const reset = (newCountDown, difficulty, language) => {\n    setStatus(\"waiting\");\n\n    if (language === CHINESE_MODE) {\n      setWordsDict(chineseWordsGenerator(difficulty, language));\n    }\n\n    if (language === ENGLISH_MODE) {\n      setWordsDict(wordsGenerator(DEFAULT_WORDS_COUNT, difficulty, language));\n    }\n\n    setCountDownConstant(newCountDown);\n    setCountDown(newCountDown);\n    setDifficulty(difficulty);\n    setLanguage(language);\n    clearInterval(intervalId);\n    setWpm(0);\n    setRawKeyStrokes(0);\n    setWpmKeyStrokes(0);\n    setCurrInput(\"\");\n    setPrevInput(\"\");\n    setIntervalId(null);\n    setCurrWordIndex(0);\n    setCurrCharIndex(-1);\n    setCurrChar(\"\");\n    setHistory({});\n    setInputWordsHistory({});\n    setWordsCorrect(new Set());\n    setWordsInCorrect(new Set());\n    textInputRef.current.focus(); // console.log(\"fully reset waiting for next inputs\");\n\n    wordSpanRefs[0].current.scrollIntoView();\n  };\n\n  const start = () => {\n    if (status === \"finished\") {\n      setCurrInput(\"\");\n      setPrevInput(\"\");\n      setCurrWordIndex(0);\n      setCurrCharIndex(-1);\n      setCurrChar(\"\");\n      setHistory({});\n      setInputWordsHistory({});\n      setWordsCorrect(new Set());\n      setWordsInCorrect(new Set());\n      setStatus(\"waiting\");\n      textInputRef.current.focus();\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let intervalId = setInterval(() => {\n        setCountDown(prevCountdown => {\n          if (prevCountdown === 0) {\n            clearInterval(intervalId); // current total extra inputs char count\n\n            const currCharExtraCount = Object.values(history).filter(e => typeof e === \"number\").reduce((a, b) => a + b, 0); // current correct inputs char count\n\n            const currCharCorrectCount = Object.values(history).filter(e => e === true).length; // current correct inputs char count\n\n            const currCharIncorrectCount = Object.values(history).filter(e => e === false).length; // current missing inputs char count\n\n            const currCharMissingCount = Object.values(history).filter(e => e === undefined).length; // current total advanced char counts\n\n            const currCharAdvancedCount = currCharCorrectCount + currCharMissingCount + currCharIncorrectCount;\n            const accuracy = currCharCorrectCount / currCharAdvancedCount * 100;\n            setStatsCharCount([accuracy, currCharCorrectCount, currCharIncorrectCount, currCharMissingCount, currCharAdvancedCount, currCharExtraCount]);\n            checkPrev();\n            setStatus(\"finished\");\n            return countDownConstant;\n          } else {\n            return prevCountdown - 1;\n          }\n        });\n      }, 1000);\n      setIntervalId(intervalId);\n    }\n  };\n\n  const UpdateInput = e => {\n    if (status === \"finished\") {\n      return;\n    }\n\n    setCurrInput(e.target.value);\n    inputWordsHistory[currWordIndex] = e.target.value.trim();\n    setInputWordsHistory(inputWordsHistory);\n  };\n\n  const handleKeyUp = e => {\n    setCapsLocked(e.getModifierState(\"CapsLock\"));\n  };\n\n  const handleKeyDown = e => {\n    const key = e.key;\n    const keyCode = e.keyCode;\n    setCapsLocked(e.getModifierState(\"CapsLock\")); // keydown count for KPM calculations to all types of operations\n\n    if (status === \"started\") {\n      setRawKeyStrokes(rawKeyStrokes + 1);\n\n      if (keyCode >= 65 && keyCode <= 90) {\n        setWpmKeyStrokes(wpmKeyStrokes + 1);\n      }\n    } // disable Caps Lock key\n\n\n    if (keyCode === 20) {\n      e.preventDefault();\n      return;\n    } // disable shift alt ctrl\n\n\n    if (keyCode >= 16 && keyCode <= 18) {\n      e.preventDefault();\n      return;\n    } // disable tab key\n\n\n    if (keyCode === 9) {\n      e.preventDefault();\n      handleTabKeyOpen();\n      return;\n    }\n\n    if (status === \"finished\") {\n      setCurrInput(\"\");\n      setPrevInput(\"\");\n      return;\n    } // update stats when typing\n\n\n    const currWpm = wpmKeyStrokes / 5 / (countDownConstant - countDown) * 60.0;\n    setWpm(currWpm); // start the game by typing any thing\n\n    if (status !== \"started\" && status !== \"finished\") {\n      start();\n    } // space bar\n\n\n    if (keyCode === 32) {\n      const prevCorrectness = checkPrev(); // advance to next regardless prev correct/not\n\n      if (prevCorrectness === true || prevCorrectness === false) {\n        // reset currInput\n        setCurrInput(\"\"); // advance to next\n\n        setCurrWordIndex(currWordIndex + 1);\n        setCurrCharIndex(-1);\n        return;\n      } else {\n        // but don't allow entire word skip\n        // console.log(\"entire word skip not allowed\");\n        return;\n      } // backspace\n\n    } else if (keyCode === 8) {\n      // delete the mapping match records\n      delete history[keyString]; // avoid over delete\n\n      if (currCharIndex < 0) {\n        // only allow delete prev word, rewind to previous\n        if (wordsInCorrect.has(currWordIndex - 1)) {\n          // console.log(\"detected prev incorrect, rewinding to previous\");\n          const prevInputWord = inputWordsHistory[currWordIndex - 1]; // console.log(prevInputWord + \" \")\n\n          setCurrInput(prevInputWord + \" \");\n          setCurrCharIndex(prevInputWord.length - 1);\n          setCurrWordIndex(currWordIndex - 1);\n          setPrevInput(prevInputWord);\n        }\n\n        return;\n      }\n\n      setCurrCharIndex(currCharIndex - 1);\n      setCurrChar(\"\");\n      return;\n    } else {\n      setCurrCharIndex(currCharIndex + 1);\n      setCurrChar(key);\n      return; // if (keyCode >= 65 && keyCode <= 90) {\n      //   setCurrCharIndex(currCharIndex + 1);\n      //   setCurrChar(key);\n      // } else {\n      //   return;\n      // }\n    }\n  };\n\n  const getExtraCharClassName = (i, idx, extra) => {\n    if (pacingStyle === PACING_CARET && currWordIndex === i && idx === extra.length - 1) {\n      return \"caret-extra-char-right-error\";\n    }\n\n    return \"error-char\";\n  };\n\n  const getExtraCharsDisplay = (word, i) => {\n    let input = inputWordsHistory[i];\n\n    if (!input) {\n      input = currInput.trim();\n    }\n\n    if (i > currWordIndex) {\n      return null;\n    }\n\n    if (input.length <= word.length) {\n      return null;\n    } else {\n      const extra = input.slice(word.length, input.length).split(\"\");\n      history[i] = extra.length;\n      return extra.map((c, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: getExtraCharClassName(i, idx, extra),\n        children: c\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this));\n    }\n  };\n\n  const checkPrev = () => {\n    const wordToCompare = words[currWordIndex];\n    const currInputWithoutSpaces = currInput.trim();\n    const isCorrect = wordToCompare === currInputWithoutSpaces;\n\n    if (!currInputWithoutSpaces || currInputWithoutSpaces.length === 0) {\n      return null;\n    }\n\n    if (isCorrect) {\n      // console.log(\"detected match\");\n      wordsCorrect.add(currWordIndex);\n      wordsInCorrect.delete(currWordIndex);\n      let inputWordsHistoryUpdate = { ...inputWordsHistory\n      };\n      inputWordsHistoryUpdate[currWordIndex] = currInputWithoutSpaces;\n      setInputWordsHistory(inputWordsHistoryUpdate); // reset prevInput to empty (will not go back)\n\n      setPrevInput(\"\"); // here count the space as effective wpm.\n\n      setWpmKeyStrokes(wpmKeyStrokes + 1);\n      return true;\n    } else {\n      // console.log(\"detected unmatch\");\n      wordsInCorrect.add(currWordIndex);\n      wordsCorrect.delete(currWordIndex);\n      let inputWordsHistoryUpdate = { ...inputWordsHistory\n      };\n      inputWordsHistoryUpdate[currWordIndex] = currInputWithoutSpaces;\n      setInputWordsHistory(inputWordsHistoryUpdate); // append currInput to prevInput\n\n      setPrevInput(prevInput + \" \" + currInputWithoutSpaces);\n      return false;\n    }\n  };\n\n  const getWordClassName = wordIdx => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"word error-word active-word\";\n        } else {\n          return \"word error-word active-word-no-pulse\";\n        }\n      }\n\n      return \"word error-word\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"word active-word\";\n        } else {\n          return \"word active-word-no-pulse\";\n        }\n      }\n\n      return \"word\";\n    }\n  };\n\n  const getChineseWordKeyClassName = wordIdx => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        return \"chinese-word-key error-chinese active-chinese\";\n      }\n\n      return \"chinese-word-key error-chinese\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        return \"chinese-word-key active-chinese\";\n      }\n\n      return \"chinese-word-key\";\n    }\n  };\n\n  const getChineseWordClassName = wordIdx => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"chinese-word error-word active-word\";\n        } else {\n          return \"chinese-word error-word active-word-no-pulse\";\n        }\n      }\n\n      return \"chinese-word error-word\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"chinese-word active-word\";\n        } else {\n          return \"chinese-word active-word-no-pulse\";\n        }\n      }\n\n      return \"chinese-word\";\n    }\n  };\n\n  const getCharClassName = (wordIdx, charIdx, char, word) => {\n    const keyString = wordIdx + \".\" + charIdx;\n\n    if (pacingStyle === PACING_CARET && wordIdx === currWordIndex && charIdx === currCharIndex + 1 && status !== \"finished\") {\n      return \"caret-char-left\";\n    }\n\n    if (history[keyString] === true) {\n      if (pacingStyle === PACING_CARET && wordIdx === currWordIndex && word.length - 1 === currCharIndex && charIdx === currCharIndex && status !== \"finished\") {\n        return \"caret-char-right-correct\";\n      }\n\n      return \"correct-char\";\n    }\n\n    if (history[keyString] === false) {\n      if (pacingStyle === PACING_CARET && wordIdx === currWordIndex && word.length - 1 === currCharIndex && charIdx === currCharIndex && status !== \"finished\") {\n        return \"caret-char-right-error\";\n      }\n\n      return \"error-char\";\n    }\n\n    if (wordIdx === currWordIndex && charIdx === currCharIndex && currChar && status !== \"finished\") {\n      if (char === currChar) {\n        history[keyString] = true;\n        return \"correct-char\";\n      } else {\n        history[keyString] = false;\n        return \"error-char\";\n      }\n    } else {\n      if (wordIdx < currWordIndex) {\n        // missing chars\n        history[keyString] = undefined;\n      }\n\n      return \"char\";\n    }\n  };\n\n  const getDifficultyButtonClassName = buttonDifficulty => {\n    if (difficulty === buttonDifficulty) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  };\n\n  const getPacingStyleButtonClassName = buttonPacingStyle => {\n    if (pacingStyle === buttonPacingStyle) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  };\n\n  const getTimerButtonClassName = buttonTimerCountDown => {\n    if (countDownConstant === buttonTimerCountDown) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  };\n\n  const getLanguageButtonClassName = buttonLanguage => {\n    if (language === buttonLanguage) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleInputFocus,\n    children: [/*#__PURE__*/_jsxDEV(CapsLockSnackbar, {\n      open: capsLocked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), language === ENGLISH_MODE && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words\",\n        children: words.map((word, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: wordSpanRefs[i],\n          className: getWordClassName(i),\n          children: [word.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getCharClassName(i, idx, char, word),\n            children: char\n          }, \"word\" + idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 19\n          }, this)), getExtraCharsDisplay(word, i)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }, this), language === CHINESE_MODE && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-box-chinese\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words\",\n        children: words.map((word, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: getChineseWordKeyClassName(i),\n            ref: wordSpanRefs[i],\n            children: [\" \", wordsKey[i]]\n          }, i + \"anchor\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getChineseWordClassName(i),\n            children: [word.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: getCharClassName(i, idx, char, word),\n              children: char\n            }, \"word\" + idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 21\n            }, this)), getExtraCharsDisplay(word, i)]\n          }, i + \"val\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 17\n          }, this)]\n        }, i + \"word\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(Stats, {\n        status: status,\n        wpm: wpm,\n        countDown: countDown,\n        countDownConstant: countDownConstant,\n        statsCharCount: statsCharCount,\n        rawKeyStrokes: rawKeyStrokes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart-button\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"restart\",\n              color: \"secondary\",\n              size: \"medium\",\n              onClick: () => {\n                reset(countDownConstant, difficulty, language);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: RESTART_BUTTON_TOOLTIP_TITLE,\n                children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 674,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 15\n            }, this), menuEnabled && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(COUNT_DOWN_90, difficulty, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getTimerButtonClassName(COUNT_DOWN_90),\n                  children: COUNT_DOWN_90\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 684,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(COUNT_DOWN_60, difficulty, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getTimerButtonClassName(COUNT_DOWN_60),\n                  children: COUNT_DOWN_60\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(COUNT_DOWN_30, difficulty, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getTimerButtonClassName(COUNT_DOWN_30),\n                  children: COUNT_DOWN_30\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(COUNT_DOWN_15, difficulty, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getTimerButtonClassName(COUNT_DOWN_15),\n                  children: COUNT_DOWN_15\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 13\n          }, this), menuEnabled && /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                reset(countDownConstant, DEFAULT_DIFFICULTY, language);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: language === ENGLISH_MODE ? DEFAULT_DIFFICULTY_TOOLTIP_TITLE : DEFAULT_DIFFICULTY_TOOLTIP_TITLE_CHINESE,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getDifficultyButtonClassName(DEFAULT_DIFFICULTY),\n                  children: DEFAULT_DIFFICULTY\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 732,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                reset(countDownConstant, HARD_DIFFICULTY, language);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: language === ENGLISH_MODE ? HARD_DIFFICULTY_TOOLTIP_TITLE : HARD_DIFFICULTY_TOOLTIP_TITLE_CHINESE,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getDifficultyButtonClassName(HARD_DIFFICULTY),\n                  children: HARD_DIFFICULTY\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 753,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"menu-separator\",\n                children: \" | \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                reset(countDownConstant, difficulty, ENGLISH_MODE);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: ENGLISH_MODE_TOOLTIP_TITLE,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getLanguageButtonClassName(ENGLISH_MODE),\n                  children: \"eng\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 769,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                reset(countDownConstant, difficulty, CHINESE_MODE);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: CHINESE_MODE_TOOLTIP_TITLE,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getLanguageButtonClassName(CHINESE_MODE),\n                  children: \"chn\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 781,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this), menuEnabled && /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                setPacingStyle(PACING_PULSE);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: PACING_PULSE_TOOLTIP,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getPacingStyleButtonClassName(PACING_PULSE),\n                  children: PACING_PULSE\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 795,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 790,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => {\n                setPacingStyle(PACING_CARET);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: PACING_CARET_TOOLTIP,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getPacingStyleButtonClassName(PACING_CARET),\n                  children: PACING_CARET\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 809,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 808,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)\n      }, \"restart-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: textInputRef,\n      type: \"text\",\n      className: \"hidden-input\",\n      onKeyDown: e => handleKeyDown(e),\n      onKeyUp: e => handleKeyUp(e),\n      value: currInput,\n      onChange: e => UpdateInput(e)\n    }, \"hidden-input\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      PaperProps: {\n        style: {\n          backgroundColor: \"transparent\",\n          boxShadow: \"none\"\n        }\n      },\n      open: openRestart,\n      onKeyDown: EnterkeyPressReset,\n      children: /*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \" press \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-type\",\n            children: \"Tab\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 844,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-type\",\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \"to restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-note\",\n          children: \" press \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-type\",\n          children: \"any key \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-note\",\n          children: \"to exit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 599,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TypeBox, \"jnsdMNloDsoIjVLvpqUPnHWJzss=\", false, function () {\n  return [useLocalPersistState, useLocalPersistState, useLocalPersistState, useLocalPersistState];\n});\n\n_c = TypeBox;\nexport default TypeBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeBox\");","map":{"version":3,"sources":["C:/Users/GIGA/Desktop/eletype-frontend-main/src/components/features/TypeBox/TypeBox.js"],"names":["React","useEffect","useState","useMemo","wordsGenerator","chineseWordsGenerator","RestartAltIcon","IconButton","Grid","Box","Tooltip","useLocalPersistState","CapsLockSnackbar","Stats","Dialog","DialogTitle","DEFAULT_COUNT_DOWN","COUNT_DOWN_90","COUNT_DOWN_60","COUNT_DOWN_30","COUNT_DOWN_15","DEFAULT_WORDS_COUNT","DEFAULT_DIFFICULTY","HARD_DIFFICULTY","DEFAULT_DIFFICULTY_TOOLTIP_TITLE","HARD_DIFFICULTY_TOOLTIP_TITLE","ENGLISH_MODE","CHINESE_MODE","ENGLISH_MODE_TOOLTIP_TITLE","CHINESE_MODE_TOOLTIP_TITLE","DEFAULT_DIFFICULTY_TOOLTIP_TITLE_CHINESE","HARD_DIFFICULTY_TOOLTIP_TITLE_CHINESE","RESTART_BUTTON_TOOLTIP_TITLE","PACING_CARET","PACING_PULSE","PACING_CARET_TOOLTIP","PACING_PULSE_TOOLTIP","TypeBox","textInputRef","isFocusedMode","handleInputFocus","countDownConstant","setCountDownConstant","pacingStyle","setPacingStyle","difficulty","setDifficulty","language","setLanguage","capsLocked","setCapsLocked","openRestart","setOpenRestart","EnterkeyPressReset","e","keyCode","preventDefault","reset","handleTabKeyOpen","wordsDict","setWordsDict","words","map","val","wordsKey","key","wordSpanRefs","Array","length","fill","i","createRef","countDown","setCountDown","intervalId","setIntervalId","status","setStatus","menuEnabled","currInput","setCurrInput","currWordIndex","setCurrWordIndex","currCharIndex","setCurrCharIndex","prevInput","setPrevInput","wordsCorrect","setWordsCorrect","Set","wordsInCorrect","setWordsInCorrect","inputWordsHistory","setInputWordsHistory","rawKeyStrokes","setRawKeyStrokes","wpmKeyStrokes","setWpmKeyStrokes","wpm","setWpm","statsCharCount","setStatsCharCount","history","setHistory","keyString","currChar","setCurrChar","generatedEng","currentArray","generatedChinese","current","offsetLeft","scrollIntoView","newCountDown","clearInterval","focus","start","setInterval","prevCountdown","currCharExtraCount","Object","values","filter","reduce","a","b","currCharCorrectCount","currCharIncorrectCount","currCharMissingCount","undefined","currCharAdvancedCount","accuracy","checkPrev","UpdateInput","target","value","trim","handleKeyUp","getModifierState","handleKeyDown","currWpm","prevCorrectness","has","prevInputWord","getExtraCharClassName","idx","extra","getExtraCharsDisplay","word","input","slice","split","c","wordToCompare","currInputWithoutSpaces","isCorrect","add","delete","inputWordsHistoryUpdate","getWordClassName","wordIdx","getChineseWordKeyClassName","getChineseWordClassName","getCharClassName","charIdx","char","getDifficultyButtonClassName","buttonDifficulty","getPacingStyleButtonClassName","buttonPacingStyle","getTimerButtonClassName","buttonTimerCountDown","getLanguageButtonClassName","buttonLanguage","style","backgroundColor","boxShadow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  wordsGenerator,\n  chineseWordsGenerator,\n} from \"../../../scripts/wordsGenerator\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport IconButton from \"../../utils/IconButton\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport useLocalPersistState from \"../../../hooks/useLocalPersistState\";\nimport CapsLockSnackbar from \"../CapsLockSnackbar\";\nimport Stats from \"./Stats\";\nimport { Dialog } from \"@mui/material\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport {\n  DEFAULT_COUNT_DOWN,\n  COUNT_DOWN_90,\n  COUNT_DOWN_60,\n  COUNT_DOWN_30,\n  COUNT_DOWN_15,\n  DEFAULT_WORDS_COUNT,\n  DEFAULT_DIFFICULTY,\n  HARD_DIFFICULTY,\n  DEFAULT_DIFFICULTY_TOOLTIP_TITLE,\n  HARD_DIFFICULTY_TOOLTIP_TITLE,\n  ENGLISH_MODE,\n  CHINESE_MODE,\n  ENGLISH_MODE_TOOLTIP_TITLE,\n  CHINESE_MODE_TOOLTIP_TITLE,\n  DEFAULT_DIFFICULTY_TOOLTIP_TITLE_CHINESE,\n  HARD_DIFFICULTY_TOOLTIP_TITLE_CHINESE,\n  RESTART_BUTTON_TOOLTIP_TITLE,\n  PACING_CARET,\n  PACING_PULSE,\n  PACING_CARET_TOOLTIP,\n  PACING_PULSE_TOOLTIP,\n} from \"../../../constants/Constants\";\n\nconst TypeBox = ({ textInputRef, isFocusedMode, handleInputFocus }) => {\n  // local persist timer\n  const [countDownConstant, setCountDownConstant] = useLocalPersistState(\n    DEFAULT_COUNT_DOWN,\n    \"timer-constant\"\n  );\n\n  // local persist pacing style\n  const [pacingStyle, setPacingStyle] = useLocalPersistState(\n    PACING_PULSE,\n    \"pacing-style\"\n  );\n\n  // local persist difficulty\n  const [difficulty, setDifficulty] = useLocalPersistState(\n    DEFAULT_DIFFICULTY,\n    \"difficulty\"\n  );\n\n  // local persist difficulty\n  const [language, setLanguage] = useLocalPersistState(\n    ENGLISH_MODE,\n    \"language\"\n  );\n\n  // Caps Lock\n  const [capsLocked, setCapsLocked] = useState(false);\n\n  // tab-enter restart dialog\n  const [openRestart, setOpenRestart] = useState(false);\n\n  const EnterkeyPressReset = (e) => {\n    // press enter/or tab to reset;\n    if (e.keyCode === 13 || e.keyCode === 9) {\n      e.preventDefault();\n      setOpenRestart(false);\n      reset(countDownConstant, difficulty, language);\n    } else {\n      e.preventDefault();\n      setOpenRestart(false);\n    }\n  };\n  const handleTabKeyOpen = () => {\n    setOpenRestart(true);\n  };\n\n  // set up words state\n  const [wordsDict, setWordsDict] = useState(() => {\n    if (language === ENGLISH_MODE) {\n      return wordsGenerator(DEFAULT_WORDS_COUNT, difficulty, ENGLISH_MODE);\n    }\n    if (language === CHINESE_MODE) {\n      return chineseWordsGenerator(difficulty, CHINESE_MODE);\n    }\n  });\n\n  const words = useMemo(() => {\n    return wordsDict.map((e) => e.val);\n  }, [wordsDict]);\n\n  const wordsKey = useMemo(() => {\n    return wordsDict.map((e) => e.key);\n  }, [wordsDict]);\n\n  const wordSpanRefs = useMemo(\n    () =>\n      Array(words.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    [words]\n  );\n\n  // set up timer state\n  const [countDown, setCountDown] = useState(countDownConstant);\n  const [intervalId, setIntervalId] = useState(null);\n\n  // set up game loop status state\n  const [status, setStatus] = useState(\"waiting\");\n\n  // enable menu\n  const menuEnabled = !isFocusedMode || status === \"finished\";\n\n  // set up hidden input input val state\n  const [currInput, setCurrInput] = useState(\"\");\n  // set up world advancing index\n  const [currWordIndex, setCurrWordIndex] = useState(0);\n  // set up char advancing index\n  const [currCharIndex, setCurrCharIndex] = useState(-1);\n  const [prevInput, setPrevInput] = useState(\"\");\n\n  // set up words examine history\n  const [wordsCorrect, setWordsCorrect] = useState(new Set());\n  const [wordsInCorrect, setWordsInCorrect] = useState(new Set());\n  const [inputWordsHistory, setInputWordsHistory] = useState({});\n\n  // setup stats\n  const [rawKeyStrokes, setRawKeyStrokes] = useState(0);\n  const [wpmKeyStrokes, setWpmKeyStrokes] = useState(0);\n  const [wpm, setWpm] = useState(0);\n  const [statsCharCount, setStatsCharCount] = useState([]);\n\n  // set up char examine hisotry\n  const [history, setHistory] = useState({});\n  const keyString = currWordIndex + \".\" + currCharIndex;\n  const [currChar, setCurrChar] = useState(\"\");\n\n  useEffect(() => {\n    if (currWordIndex === DEFAULT_WORDS_COUNT - 1) {\n      if (language === ENGLISH_MODE) {\n        const generatedEng = wordsGenerator(\n          DEFAULT_WORDS_COUNT,\n          difficulty,\n          ENGLISH_MODE\n        );\n        setWordsDict((currentArray) => [...currentArray, ...generatedEng]);\n      }\n      if (language === CHINESE_MODE) {\n        const generatedChinese = chineseWordsGenerator(\n          difficulty,\n          CHINESE_MODE\n        );\n        setWordsDict((currentArray) => [...currentArray, ...generatedChinese]);\n      }\n    }\n    if (\n      currWordIndex !== 0 &&\n      wordSpanRefs[currWordIndex].current.offsetLeft <\n        wordSpanRefs[currWordIndex - 1].current.offsetLeft\n    ) {\n      wordSpanRefs[currWordIndex - 1].current.scrollIntoView();\n    } else {\n      return;\n    }\n  }, [currWordIndex, wordSpanRefs, difficulty, language]);\n\n  const reset = (newCountDown, difficulty, language) => {\n    setStatus(\"waiting\");\n    if (language === CHINESE_MODE) {\n      setWordsDict(chineseWordsGenerator(difficulty, language));\n    }\n    if (language === ENGLISH_MODE) {\n      setWordsDict(wordsGenerator(DEFAULT_WORDS_COUNT, difficulty, language));\n    }\n    setCountDownConstant(newCountDown);\n    setCountDown(newCountDown);\n    setDifficulty(difficulty);\n    setLanguage(language);\n    clearInterval(intervalId);\n    setWpm(0);\n    setRawKeyStrokes(0);\n    setWpmKeyStrokes(0);\n    setCurrInput(\"\");\n    setPrevInput(\"\");\n    setIntervalId(null);\n    setCurrWordIndex(0);\n    setCurrCharIndex(-1);\n    setCurrChar(\"\");\n    setHistory({});\n    setInputWordsHistory({});\n    setWordsCorrect(new Set());\n    setWordsInCorrect(new Set());\n    textInputRef.current.focus();\n    // console.log(\"fully reset waiting for next inputs\");\n    wordSpanRefs[0].current.scrollIntoView();\n  };\n\n  const start = () => {\n    if (status === \"finished\") {\n      setCurrInput(\"\");\n      setPrevInput(\"\");\n      setCurrWordIndex(0);\n      setCurrCharIndex(-1);\n      setCurrChar(\"\");\n      setHistory({});\n      setInputWordsHistory({});\n      setWordsCorrect(new Set());\n      setWordsInCorrect(new Set());\n      setStatus(\"waiting\");\n      textInputRef.current.focus();\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      let intervalId = setInterval(() => {\n        setCountDown((prevCountdown) => {\n          if (prevCountdown === 0) {\n            clearInterval(intervalId);\n            // current total extra inputs char count\n            const currCharExtraCount = Object.values(history)\n              .filter((e) => typeof e === \"number\")\n              .reduce((a, b) => a + b, 0);\n\n            // current correct inputs char count\n            const currCharCorrectCount = Object.values(history).filter(\n              (e) => e === true\n            ).length;\n\n            // current correct inputs char count\n            const currCharIncorrectCount = Object.values(history).filter(\n              (e) => e === false\n            ).length;\n\n            // current missing inputs char count\n            const currCharMissingCount = Object.values(history).filter(\n              (e) => e === undefined\n            ).length;\n\n            // current total advanced char counts\n            const currCharAdvancedCount =\n              currCharCorrectCount +\n              currCharMissingCount +\n              currCharIncorrectCount;\n\n            const accuracy =\n              (currCharCorrectCount / currCharAdvancedCount) * 100;\n            setStatsCharCount([\n              accuracy,\n              currCharCorrectCount,\n              currCharIncorrectCount,\n              currCharMissingCount,\n              currCharAdvancedCount,\n              currCharExtraCount,\n            ]);\n\n            checkPrev();\n            setStatus(\"finished\");\n\n            return countDownConstant;\n          } else {\n            return prevCountdown - 1;\n          }\n        });\n      }, 1000);\n      setIntervalId(intervalId);\n    }\n  };\n\n  const UpdateInput = (e) => {\n    if (status === \"finished\") {\n      return;\n    }\n    setCurrInput(e.target.value);\n    inputWordsHistory[currWordIndex] = e.target.value.trim();\n    setInputWordsHistory(inputWordsHistory);\n  };\n\n  const handleKeyUp = (e) => {\n    setCapsLocked(e.getModifierState(\"CapsLock\"));\n  };\n\n  const handleKeyDown = (e) => {\n    const key = e.key;\n    const keyCode = e.keyCode;\n    setCapsLocked(e.getModifierState(\"CapsLock\"));\n\n    // keydown count for KPM calculations to all types of operations\n    if (status === \"started\") {\n      setRawKeyStrokes(rawKeyStrokes + 1);\n      if (keyCode >= 65 && keyCode <= 90) {\n        setWpmKeyStrokes(wpmKeyStrokes + 1);\n      }\n    }\n\n    // disable Caps Lock key\n    if (keyCode === 20) {\n      e.preventDefault();\n      return;\n    }\n\n    // disable shift alt ctrl\n    if (keyCode >= 16 && keyCode <= 18) {\n      e.preventDefault();\n      return;\n    }\n\n    // disable tab key\n    if (keyCode === 9) {\n      e.preventDefault();\n      handleTabKeyOpen();\n      return;\n    }\n\n    if (status === \"finished\") {\n      setCurrInput(\"\");\n      setPrevInput(\"\");\n      return;\n    }\n\n    // update stats when typing\n    const currWpm =\n      (wpmKeyStrokes / 5 / (countDownConstant - countDown)) * 60.0;\n    setWpm(currWpm);\n\n    // start the game by typing any thing\n    if (status !== \"started\" && status !== \"finished\") {\n      start();\n    }\n\n    // space bar\n    if (keyCode === 32) {\n      const prevCorrectness = checkPrev();\n      // advance to next regardless prev correct/not\n      if (prevCorrectness === true || prevCorrectness === false) {\n        // reset currInput\n        setCurrInput(\"\");\n        // advance to next\n        setCurrWordIndex(currWordIndex + 1);\n        setCurrCharIndex(-1);\n        return;\n      } else {\n        // but don't allow entire word skip\n        // console.log(\"entire word skip not allowed\");\n        return;\n      }\n\n      // backspace\n    } else if (keyCode === 8) {\n      // delete the mapping match records\n      delete history[keyString];\n\n      // avoid over delete\n      if (currCharIndex < 0) {\n        // only allow delete prev word, rewind to previous\n        if (wordsInCorrect.has(currWordIndex - 1)) {\n          // console.log(\"detected prev incorrect, rewinding to previous\");\n          const prevInputWord = inputWordsHistory[currWordIndex - 1];\n          // console.log(prevInputWord + \" \")\n          setCurrInput(prevInputWord + \" \");\n          setCurrCharIndex(prevInputWord.length - 1);\n          setCurrWordIndex(currWordIndex - 1);\n          setPrevInput(prevInputWord);\n        }\n        return;\n      }\n      setCurrCharIndex(currCharIndex - 1);\n      setCurrChar(\"\");\n      return;\n    } else {\n      setCurrCharIndex(currCharIndex + 1);\n      setCurrChar(key);\n      return;\n      // if (keyCode >= 65 && keyCode <= 90) {\n      //   setCurrCharIndex(currCharIndex + 1);\n      //   setCurrChar(key);\n      // } else {\n      //   return;\n      // }\n    }\n  };\n\n  const getExtraCharClassName = (i, idx, extra) => {\n    if (\n      pacingStyle === PACING_CARET &&\n      currWordIndex === i &&\n      idx === extra.length - 1\n    ) {\n      return \"caret-extra-char-right-error\";\n    }\n    return \"error-char\";\n  };\n\n  const getExtraCharsDisplay = (word, i) => {\n    let input = inputWordsHistory[i];\n    if (!input) {\n      input = currInput.trim();\n    }\n    if (i > currWordIndex) {\n      return null;\n    }\n    if (input.length <= word.length) {\n      return null;\n    } else {\n      const extra = input.slice(word.length, input.length).split(\"\");\n      history[i] = extra.length;\n      return extra.map((c, idx) => (\n        <span key={idx} className={getExtraCharClassName(i, idx, extra)}>\n          {c}\n        </span>\n      ));\n    }\n  };\n\n  const checkPrev = () => {\n    const wordToCompare = words[currWordIndex];\n    const currInputWithoutSpaces = currInput.trim();\n    const isCorrect = wordToCompare === currInputWithoutSpaces;\n    if (!currInputWithoutSpaces || currInputWithoutSpaces.length === 0) {\n      return null;\n    }\n    if (isCorrect) {\n      // console.log(\"detected match\");\n      wordsCorrect.add(currWordIndex);\n      wordsInCorrect.delete(currWordIndex);\n      let inputWordsHistoryUpdate = { ...inputWordsHistory };\n      inputWordsHistoryUpdate[currWordIndex] = currInputWithoutSpaces;\n      setInputWordsHistory(inputWordsHistoryUpdate);\n      // reset prevInput to empty (will not go back)\n      setPrevInput(\"\");\n\n      // here count the space as effective wpm.\n      setWpmKeyStrokes(wpmKeyStrokes + 1);\n      return true;\n    } else {\n      // console.log(\"detected unmatch\");\n      wordsInCorrect.add(currWordIndex);\n      wordsCorrect.delete(currWordIndex);\n      let inputWordsHistoryUpdate = { ...inputWordsHistory };\n      inputWordsHistoryUpdate[currWordIndex] = currInputWithoutSpaces;\n      setInputWordsHistory(inputWordsHistoryUpdate);\n      // append currInput to prevInput\n      setPrevInput(prevInput + \" \" + currInputWithoutSpaces);\n      return false;\n    }\n  };\n\n  const getWordClassName = (wordIdx) => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"word error-word active-word\";\n        } else {\n          return \"word error-word active-word-no-pulse\";\n        }\n      }\n      return \"word error-word\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"word active-word\";\n        } else {\n          return \"word active-word-no-pulse\";\n        }\n      }\n      return \"word\";\n    }\n  };\n\n  const getChineseWordKeyClassName = (wordIdx) => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        return \"chinese-word-key error-chinese active-chinese\";\n      }\n      return \"chinese-word-key error-chinese\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        return \"chinese-word-key active-chinese\";\n      }\n      return \"chinese-word-key\";\n    }\n  };\n\n  const getChineseWordClassName = (wordIdx) => {\n    if (wordsInCorrect.has(wordIdx)) {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"chinese-word error-word active-word\";\n        } else {\n          return \"chinese-word error-word active-word-no-pulse\";\n        }\n      }\n      return \"chinese-word error-word\";\n    } else {\n      if (currWordIndex === wordIdx) {\n        if (pacingStyle === PACING_PULSE) {\n          return \"chinese-word active-word\";\n        } else {\n          return \"chinese-word active-word-no-pulse\";\n        }\n      }\n      return \"chinese-word\";\n    }\n  };\n\n  const getCharClassName = (wordIdx, charIdx, char, word) => {\n    const keyString = wordIdx + \".\" + charIdx;\n    if (\n      pacingStyle === PACING_CARET &&\n      wordIdx === currWordIndex &&\n      charIdx === currCharIndex + 1 &&\n      status !== \"finished\"\n    ) {\n      return \"caret-char-left\";\n    }\n    if (history[keyString] === true) {\n      if (\n        pacingStyle === PACING_CARET &&\n        wordIdx === currWordIndex &&\n        word.length - 1 === currCharIndex &&\n        charIdx === currCharIndex &&\n        status !== \"finished\"\n      ) {\n        return \"caret-char-right-correct\";\n      }\n      return \"correct-char\";\n    }\n    if (history[keyString] === false) {\n      if (\n        pacingStyle === PACING_CARET &&\n        wordIdx === currWordIndex &&\n        word.length - 1 === currCharIndex &&\n        charIdx === currCharIndex &&\n        status !== \"finished\"\n      ) {\n        return \"caret-char-right-error\";\n      }\n      return \"error-char\";\n    }\n    if (\n      wordIdx === currWordIndex &&\n      charIdx === currCharIndex &&\n      currChar &&\n      status !== \"finished\"\n    ) {\n      if (char === currChar) {\n        history[keyString] = true;\n        return \"correct-char\";\n      } else {\n        history[keyString] = false;\n        return \"error-char\";\n      }\n    } else {\n      if (wordIdx < currWordIndex) {\n        // missing chars\n        history[keyString] = undefined;\n      }\n\n      return \"char\";\n    }\n  };\n\n  const getDifficultyButtonClassName = (buttonDifficulty) => {\n    if (difficulty === buttonDifficulty) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  const getPacingStyleButtonClassName = (buttonPacingStyle) => {\n    if (pacingStyle === buttonPacingStyle) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  const getTimerButtonClassName = (buttonTimerCountDown) => {\n    if (countDownConstant === buttonTimerCountDown) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  const getLanguageButtonClassName = (buttonLanguage) => {\n    if (language === buttonLanguage) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  return (\n    <div onClick={handleInputFocus}>\n      <CapsLockSnackbar open={capsLocked}></CapsLockSnackbar>\n      {language === ENGLISH_MODE && (\n        <div className=\"type-box\">\n          <div className=\"words\">\n            {words.map((word, i) => (\n              <span\n                key={i}\n                ref={wordSpanRefs[i]}\n                className={getWordClassName(i)}\n              >\n                {word.split(\"\").map((char, idx) => (\n                  <span\n                    key={\"word\" + idx}\n                    className={getCharClassName(i, idx, char, word)}\n                  >\n                    {char}\n                  </span>\n                ))}\n                {getExtraCharsDisplay(word, i)}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n      {language === CHINESE_MODE && (\n        <div className=\"type-box-chinese\">\n          <div className=\"words\">\n            {words.map((word, i) => (\n              <div key={i + \"word\"}>\n                <span\n                  key={i + \"anchor\"}\n                  className={getChineseWordKeyClassName(i)}\n                  ref={wordSpanRefs[i]}\n                >\n                  {\" \"}\n                  {wordsKey[i]}\n                </span>\n                <span key={i + \"val\"} className={getChineseWordClassName(i)}>\n                  {word.split(\"\").map((char, idx) => (\n                    <span\n                      key={\"word\" + idx}\n                      className={getCharClassName(i, idx, char, word)}\n                    >\n                      {char}\n                    </span>\n                  ))}\n                  {getExtraCharsDisplay(word, i)}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      <div className=\"stats\">\n        <Stats\n          status={status}\n          wpm={wpm}\n          countDown={countDown}\n          countDownConstant={countDownConstant}\n          statsCharCount={statsCharCount}\n          rawKeyStrokes={rawKeyStrokes}\n        ></Stats>\n        <div className=\"restart-button\" key=\"restart-button\">\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Box display=\"flex\" flexDirection=\"row\">\n              <IconButton\n                aria-label=\"restart\"\n                color=\"secondary\"\n                size=\"medium\"\n                onClick={() => {\n                  reset(countDownConstant, difficulty, language);\n                }}\n              >\n                <Tooltip title={RESTART_BUTTON_TOOLTIP_TITLE}>\n                  <RestartAltIcon />\n                </Tooltip>\n              </IconButton>\n              {menuEnabled && (\n                <>\n                  <IconButton\n                    onClick={() => {\n                      reset(COUNT_DOWN_90, difficulty, language);\n                    }}\n                  >\n                    <span className={getTimerButtonClassName(COUNT_DOWN_90)}>\n                      {COUNT_DOWN_90}\n                    </span>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(COUNT_DOWN_60, difficulty, language);\n                    }}\n                  >\n                    <span className={getTimerButtonClassName(COUNT_DOWN_60)}>\n                      {COUNT_DOWN_60}\n                    </span>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(COUNT_DOWN_30, difficulty, language);\n                    }}\n                  >\n                    <span className={getTimerButtonClassName(COUNT_DOWN_30)}>\n                      {COUNT_DOWN_30}\n                    </span>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(COUNT_DOWN_15, difficulty, language);\n                    }}\n                  >\n                    <span className={getTimerButtonClassName(COUNT_DOWN_15)}>\n                      {COUNT_DOWN_15}\n                    </span>\n                  </IconButton>\n                </>\n              )}\n            </Box>\n            {menuEnabled && (\n              <Box display=\"flex\" flexDirection=\"row\">\n                <IconButton\n                  onClick={() => {\n                    reset(countDownConstant, DEFAULT_DIFFICULTY, language);\n                  }}\n                >\n                  <Tooltip\n                    title={\n                      language === ENGLISH_MODE\n                        ? DEFAULT_DIFFICULTY_TOOLTIP_TITLE\n                        : DEFAULT_DIFFICULTY_TOOLTIP_TITLE_CHINESE\n                    }\n                  >\n                    <span\n                      className={getDifficultyButtonClassName(\n                        DEFAULT_DIFFICULTY\n                      )}\n                    >\n                      {DEFAULT_DIFFICULTY}\n                    </span>\n                  </Tooltip>\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    reset(countDownConstant, HARD_DIFFICULTY, language);\n                  }}\n                >\n                  <Tooltip\n                    title={\n                      language === ENGLISH_MODE\n                        ? HARD_DIFFICULTY_TOOLTIP_TITLE\n                        : HARD_DIFFICULTY_TOOLTIP_TITLE_CHINESE\n                    }\n                  >\n                    <span\n                      className={getDifficultyButtonClassName(HARD_DIFFICULTY)}\n                    >\n                      {HARD_DIFFICULTY}\n                    </span>\n                  </Tooltip>\n                </IconButton>\n                <IconButton>\n                  {\" \"}\n                  <span className=\"menu-separator\"> | </span>{\" \"}\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    reset(countDownConstant, difficulty, ENGLISH_MODE);\n                  }}\n                >\n                  <Tooltip title={ENGLISH_MODE_TOOLTIP_TITLE}>\n                    <span className={getLanguageButtonClassName(ENGLISH_MODE)}>\n                      eng\n                    </span>\n                  </Tooltip>\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    reset(countDownConstant, difficulty, CHINESE_MODE);\n                  }}\n                >\n                  <Tooltip title={CHINESE_MODE_TOOLTIP_TITLE}>\n                    <span className={getLanguageButtonClassName(CHINESE_MODE)}>\n                      chn\n                    </span>\n                  </Tooltip>\n                </IconButton>\n              </Box>\n            )}\n            {menuEnabled && (\n              <Box display=\"flex\" flexDirection=\"row\">\n                <IconButton\n                  onClick={() => {\n                    setPacingStyle(PACING_PULSE);\n                  }}\n                >\n                  <Tooltip title={PACING_PULSE_TOOLTIP}>\n                    <span\n                      className={getPacingStyleButtonClassName(PACING_PULSE)}\n                    >\n                      {PACING_PULSE}\n                    </span>\n                  </Tooltip>\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    setPacingStyle(PACING_CARET);\n                  }}\n                >\n                  <Tooltip title={PACING_CARET_TOOLTIP}>\n                    <span\n                      className={getPacingStyleButtonClassName(PACING_CARET)}\n                    >\n                      {PACING_CARET}\n                    </span>\n                  </Tooltip>\n                </IconButton>\n              </Box>\n            )}\n          </Grid>\n        </div>\n      </div>\n      <input\n        key=\"hidden-input\"\n        ref={textInputRef}\n        type=\"text\"\n        className=\"hidden-input\"\n        onKeyDown={(e) => handleKeyDown(e)}\n        onKeyUp={(e) => handleKeyUp(e)}\n        value={currInput}\n        onChange={(e) => UpdateInput(e)}\n      />\n      <Dialog\n        PaperProps={{\n          style: {\n            backgroundColor: \"transparent\",\n            boxShadow: \"none\",\n          },\n        }}\n        open={openRestart}\n        onKeyDown={EnterkeyPressReset}\n      >\n        <DialogTitle>\n          <div>\n            <span className=\"key-note\"> press </span>\n            <span className=\"key-type\">Tab</span>{\" \"}\n            <span className=\"key-note\">/</span>{\" \"}\n            <span className=\"key-type\">Enter</span>{\" \"}\n            <span className=\"key-note\">to restart</span>\n          </div>\n          <span className=\"key-note\"> press </span>\n          <span className=\"key-type\">any key </span>{\" \"}\n          <span className=\"key-note\">to exit</span>\n        </DialogTitle>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default TypeBox;\n"]},"metadata":{},"sourceType":"module"}