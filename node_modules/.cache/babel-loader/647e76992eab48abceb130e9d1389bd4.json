{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGA\\\\Desktop\\\\eletype-frontend-main\\\\src\\\\components\\\\features\\\\FreeTypingBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FreeTypingBox = _ref => {\n  _s();\n\n  let {\n    spaces = 4,\n    textAreaRef\n  } = _ref;\n  const [text, setText] = useState({\n    value: \"\",\n    caret: -1,\n    target: null\n  });\n  useEffect(() => {\n    if (text.caret >= 0) {\n      text.target.setSelectionRange(text.caret + spaces, text.caret + spaces);\n    }\n  }, [text, spaces]);\n\n  const handleTab = e => {\n    let content = e.target.value;\n    let caret = e.target.selectionStart;\n\n    if (e.key === \"Tab\") {\n      e.preventDefault();\n      let newText = content.substring(0, caret) + \" \".repeat(spaces) + content.substring(caret);\n      setText({\n        value: newText,\n        caret: caret,\n        target: e.target\n      });\n    }\n  };\n\n  const handleText = e => setText({\n    value: e.target.value,\n    caret: -1,\n    target: e.target\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"novelty-container\",\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: handleText,\n      onKeyDown: handleTab,\n      value: text.value,\n      ref: textAreaRef,\n      className: \"textarea\",\n      spellCheck: \"false\",\n      placeholder: \" ... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FreeTypingBox, \"ZS+caaR98Qxwt2zogsmO3DxEakE=\");\n\n_c = FreeTypingBox;\nexport default FreeTypingBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeTypingBox\");","map":{"version":3,"sources":["C:/Users/GIGA/Desktop/eletype-frontend-main/src/components/features/FreeTypingBox.js"],"names":["React","useEffect","useState","FreeTypingBox","spaces","textAreaRef","text","setText","value","caret","target","setSelectionRange","handleTab","e","content","selectionStart","key","preventDefault","newText","substring","repeat","handleText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,aAAa,GAAG,QAAiC;AAAA;;AAAA,MAAhC;AAAEC,IAAAA,MAAM,GAAG,CAAX;AAAcC,IAAAA;AAAd,GAAgC;AACrD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,KAAK,EAAE,CAAC,CAArB;AAAwBC,IAAAA,MAAM,EAAE;AAAhC,GAAD,CAAhC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,IAAI,CAACG,KAAL,IAAc,CAAlB,EAAqB;AACnBH,MAAAA,IAAI,CAACI,MAAL,CAAYC,iBAAZ,CAA8BL,IAAI,CAACG,KAAL,GAAaL,MAA3C,EAAmDE,IAAI,CAACG,KAAL,GAAaL,MAAhE;AACD;AACF,GAJQ,EAIN,CAACE,IAAD,EAAOF,MAAP,CAJM,CAAT;;AAMA,QAAMQ,SAAS,GAAIC,CAAD,IAAO;AACvB,QAAIC,OAAO,GAAGD,CAAC,CAACH,MAAF,CAASF,KAAvB;AACA,QAAIC,KAAK,GAAGI,CAAC,CAACH,MAAF,CAASK,cAArB;;AAEA,QAAIF,CAAC,CAACG,GAAF,KAAU,KAAd,EAAqB;AACnBH,MAAAA,CAAC,CAACI,cAAF;AAEA,UAAIC,OAAO,GACTJ,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBV,KAArB,IACA,IAAIW,MAAJ,CAAWhB,MAAX,CADA,GAEAU,OAAO,CAACK,SAAR,CAAkBV,KAAlB,CAHF;AAKAF,MAAAA,OAAO,CAAC;AAAEC,QAAAA,KAAK,EAAEU,OAAT;AAAkBT,QAAAA,KAAK,EAAEA,KAAzB;AAAgCC,QAAAA,MAAM,EAAEG,CAAC,CAACH;AAA1C,OAAD,CAAP;AACD;AACF,GAdD;;AAgBA,QAAMW,UAAU,GAAIR,CAAD,IACjBN,OAAO,CAAC;AAAEC,IAAAA,KAAK,EAAEK,CAAC,CAACH,MAAF,CAASF,KAAlB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,CAAjC;AAAoCC,IAAAA,MAAM,EAAEG,CAAC,CAACH;AAA9C,GAAD,CADT;;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,2BAEE;AACE,MAAA,QAAQ,EAAEW,UADZ;AAEE,MAAA,SAAS,EAAET,SAFb;AAGE,MAAA,KAAK,EAAEN,IAAI,CAACE,KAHd;AAIE,MAAA,GAAG,EAAEH,WAJP;AAKE,MAAA,SAAS,EAAC,UALZ;AAME,MAAA,UAAU,EAAC,OANb;AAOE,MAAA,WAAW,EAAC;AAPd;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA1CD;;GAAMF,a;;KAAAA,a;AA4CN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst FreeTypingBox = ({ spaces = 4, textAreaRef }) => {\n  const [text, setText] = useState({ value: \"\", caret: -1, target: null });\n\n  useEffect(() => {\n    if (text.caret >= 0) {\n      text.target.setSelectionRange(text.caret + spaces, text.caret + spaces);\n    }\n  }, [text, spaces]);\n\n  const handleTab = (e) => {\n    let content = e.target.value;\n    let caret = e.target.selectionStart;\n\n    if (e.key === \"Tab\") {\n      e.preventDefault();\n\n      let newText =\n        content.substring(0, caret) +\n        \" \".repeat(spaces) +\n        content.substring(caret);\n\n      setText({ value: newText, caret: caret, target: e.target });\n    }\n  };\n\n  const handleText = (e) =>\n    setText({ value: e.target.value, caret: -1, target: e.target });\n\n  return (\n    <div className=\"novelty-container\">\n    \n      <textarea\n        onChange={handleText}\n        onKeyDown={handleTab}\n        value={text.value}\n        ref={textAreaRef}\n        className=\"textarea\"\n        spellCheck=\"false\"\n        placeholder=\" ... \"\n      />\n    </div>\n  );\n};\n\nexport default FreeTypingBox;\n"]},"metadata":{},"sourceType":"module"}