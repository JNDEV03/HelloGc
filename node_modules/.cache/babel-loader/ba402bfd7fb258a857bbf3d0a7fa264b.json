{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGA\\\\Desktop\\\\eletype-frontend-main\\\\src\\\\components\\\\features\\\\SentenceBox\\\\SentenceBox.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { sentencesGenerator } from \"../../../scripts/sentencesGenerator\";\nimport { Stack } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport IconButton from \"../../utils/IconButton\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport { DEFAULT_SENTENCES_COUNT, TEN_SENTENCES_COUNT, FIFTEEN_SENTENCES_COUNT, RESTART_BUTTON_TOOLTIP_TITLE } from \"../../../constants/Constants\";\nimport useLocalPersistState from \"../../../hooks/useLocalPersistState\";\nimport { ENGLISH_MODE, CHINESE_MODE, ENGLISH_SENTENCE_MODE_TOOLTIP_TITLE, CHINESE_SENTENCE_MODE_TOOLTIP_TITLE } from \"../../../constants/Constants\";\nimport { Tooltip } from \"@mui/material\";\nimport { Dialog } from \"@mui/material\";\nimport { DialogTitle } from \"@mui/material\";\nimport SentenceBoxStats from \"./SentenceBoxStats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SentenceBox = _ref => {\n  _s();\n\n  var _sentences;\n\n  let {\n    sentenceInputRef,\n    handleInputFocus,\n    isFocusedMode\n  } = _ref;\n  // local persist timer\n  const [sentencesCountConstant, setSentencesCountConstant] = useLocalPersistState(DEFAULT_SENTENCES_COUNT, \"sentences-constant\"); // local persist difficulty\n\n  const [language, setLanguage] = useLocalPersistState(ENGLISH_MODE, \"sentences-language\"); // tab-enter restart dialog\n\n  const [openRestart, setOpenRestart] = useState(false);\n\n  const EnterkeyPressReset = e => {\n    // press enter/or tab to reset;\n    if (e.keyCode === 13 || e.keyCode === 9) {\n      e.preventDefault();\n      setOpenRestart(false);\n      reset(sentencesCountConstant, language);\n    } else {\n      e.preventDefault();\n      setOpenRestart(false);\n    }\n  };\n\n  const handleTabKeyOpen = () => {\n    setOpenRestart(true);\n  };\n\n  const getSentencesCountButtonClassName = buttonSentencesCountConstant => {\n    if (buttonSentencesCountConstant === sentencesCountConstant) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  };\n\n  const getLanguageButtonClassName = buttonLanguage => {\n    if (language === buttonLanguage) {\n      return \"active-button\";\n    }\n\n    return \"inactive-button\";\n  }; // set up game loop status state\n\n\n  const [status, setStatus] = useState(\"waiting\"); // set up stop watch in seconds\n\n  const [time, setTime] = useState(0); // set up stop watch running status\n\n  const [timeRunning, setTimeRunning] = useState(false); // stop watch loop\n\n  useEffect(() => {\n    let interval;\n\n    if (timeRunning) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else if (!timeRunning) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timeRunning]); // set up sentences\n\n  const [sentencesDict, setSentencesDict] = useState(() => {\n    return sentencesGenerator(sentencesCountConstant, language);\n  }); // enable menu\n\n  const menuEnabled = !isFocusedMode || status === \"finished\";\n  const sentences = useMemo(() => {\n    return sentencesDict.map(e => e.val);\n  }, [sentencesDict]); // set up currSentenceIndex\n\n  const [currSentenceIndex, setCurrSentenceIndex] = useState(0);\n  const currSentence = sentences[currSentenceIndex]; // set up curr input\n\n  const [currInput, setCurrInput] = useState(\"\"); // set up stats kpm\n\n  const [rawKeyStroke, setRawKeyStroke] = useState(0);\n  const wpm = time < 1 ? 0 : rawKeyStroke / time * 60 / 5;\n\n  const reset = (newSentencesCountConstant, newLanguage) => {\n    setStatus(\"watiting\");\n    setSentencesCountConstant(newSentencesCountConstant);\n    setLanguage(newLanguage);\n    setSentencesDict(sentencesGenerator(newSentencesCountConstant, newLanguage));\n    setTimeRunning(false);\n    setTime(0);\n    setCurrSentenceIndex(0);\n    setCurrInput(\"\");\n    sentenceInputRef.current.focus();\n    sentenceInputRef.current.value = \"\";\n    setRawKeyStroke(0);\n    setStats({\n      correct: 0,\n      incorrect: 0,\n      extra: 0\n    });\n  };\n\n  const start = () => {\n    if (status === \"finished\") {\n      reset(sentencesCountConstant, language);\n    }\n\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      setTimeRunning(true);\n    }\n  };\n\n  const [stats, setStats] = useState({\n    correct: 0,\n    incorrect: 0,\n    extra: 0\n  });\n\n  const checkAndUpdateStats = (currSentence, currInput) => {\n    const newStats = stats;\n\n    for (let i = 0; i < currSentence.length; i++) {\n      if (currSentence[i] === currInput[i]) {\n        newStats.correct++;\n      } else {\n        newStats.incorrect++;\n      }\n    }\n\n    const deltaCharDifference = currInput.length - currSentence.length;\n\n    if (deltaCharDifference > 0) {\n      newStats.extra = deltaCharDifference;\n    }\n\n    setStats(newStats);\n  };\n\n  const handleKeyDown = e => {\n    const keyCode = e.keyCode; // disable tab key\n\n    if (keyCode === 9) {\n      e.preventDefault();\n      handleTabKeyOpen();\n      return;\n    }\n\n    if (status === \"finished\") {\n      e.preventDefault();\n      return;\n    } // start the game by typing any thing\n\n\n    if (status !== \"started\" && status !== \"finished\") {\n      start();\n      return;\n    }\n\n    setRawKeyStroke(rawKeyStroke + 1); // if enter key pressed.\n    // advance to next sentence only if the input val length is equal to the current sentence char count);\n\n    if (keyCode === 13) {\n      if (currInput.length >= sentences[currSentenceIndex].length) {\n        checkAndUpdateStats(currSentence, currInput);\n\n        if (currSentenceIndex + 1 === sentencesCountConstant) {\n          setStatus(\"finished\");\n          setTimeRunning(false);\n          return;\n        }\n\n        setCurrSentenceIndex(currSentenceIndex + 1);\n        setCurrInput(\"\");\n        sentenceInputRef.current.value = \"\";\n        return;\n      }\n\n      return;\n    }\n  };\n\n  const getCharClassName = (idx, char) => {\n    if (idx < currInput.length) {\n      if (currInput[idx] === char) {\n        return \"correct-sentence-char\";\n      }\n\n      if (char === \" \") {\n        return \"error-sentence-space-char\";\n      }\n\n      return \"error-sentence-char\";\n    }\n\n    return \"sentence-char\";\n  };\n\n  let isOnComposition = false;\n  const isChrome = !!window.chrome;\n\n  const handleComposition = e => {\n    const {\n      type,\n      currentTarget: {\n        value\n      }\n    } = e;\n\n    if (type === \"compositionend\") {\n      // composition finished\n      isOnComposition = false;\n\n      if (e.currentTarget instanceof HTMLInputElement && !isOnComposition && isChrome) {\n        setCurrInput(value);\n      }\n    } else {\n      // composition ongoing\n      isOnComposition = true;\n    }\n  };\n\n  const handleChange = e => {\n    const {\n      currentTarget: {\n        value\n      }\n    } = e;\n\n    if (e.currentTarget instanceof HTMLInputElement && !isOnComposition) {\n      setCurrInput(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleInputFocus,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-box-sentence\",\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sentence-display-field\",\n          children: currSentence.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: getCharClassName(idx, char),\n            children: char\n          }, \"word\" + idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: sentenceInputRef,\n          type: \"text\",\n          spellCheck: \"false\",\n          className: \"sentence-input-field\",\n          onKeyDown: e => handleKeyDown(e),\n          onCompositionStart: handleComposition,\n          onCompositionUpdate: handleComposition,\n          onCompositionEnd: handleComposition,\n          onChange: handleChange\n        }, \"hidden-sentence-input\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), status !== \"finished\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"next-sentence-display\",\n          children: [\"->\", \" \", (_sentences = sentences[currSentenceIndex + 1]) !== null && _sentences !== void 0 ? _sentences : \"Press â†µ to finish.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(SentenceBoxStats, {\n        countDown: time,\n        wpm: wpm,\n        status: status,\n        stats: stats,\n        rawKeyStrokes: rawKeyStroke\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart-button\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexDirection: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"restart\",\n              color: \"secondary\",\n              size: \"medium\",\n              onClick: () => {\n                reset(sentencesCountConstant, language);\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: RESTART_BUTTON_TOOLTIP_TITLE,\n                children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this), menuEnabled && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(DEFAULT_SENTENCES_COUNT, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getSentencesCountButtonClassName(DEFAULT_SENTENCES_COUNT),\n                  children: DEFAULT_SENTENCES_COUNT\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(TEN_SENTENCES_COUNT, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getSentencesCountButtonClassName(TEN_SENTENCES_COUNT),\n                  children: TEN_SENTENCES_COUNT\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(FIFTEEN_SENTENCES_COUNT, language);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: getSentencesCountButtonClassName(FIFTEEN_SENTENCES_COUNT),\n                  children: FIFTEEN_SENTENCES_COUNT\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"menu-separator\",\n                  children: \" | \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(sentencesCountConstant, ENGLISH_MODE);\n                },\n                children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: ENGLISH_SENTENCE_MODE_TOOLTIP_TITLE,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: getLanguageButtonClassName(ENGLISH_MODE),\n                    children: \"eng\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => {\n                  reset(sentencesCountConstant, CHINESE_MODE);\n                },\n                children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: CHINESE_SENTENCE_MODE_TOOLTIP_TITLE,\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: getLanguageButtonClassName(CHINESE_MODE),\n                    children: \"chn\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 377,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, \"restart-button\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      PaperProps: {\n        style: {\n          backgroundColor: \"transparent\",\n          boxShadow: \"none\"\n        }\n      },\n      open: openRestart,\n      onKeyDown: EnterkeyPressReset,\n      children: /*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \" press \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-type\",\n            children: \"Tab\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-type\",\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"key-note\",\n            children: \"to restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-note\",\n          children: \" press \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-type\",\n          children: \"any key \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"key-note\",\n          children: \"to exit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SentenceBox, \"AHEMcXOcAvKV6Hzu11E5T+Igxrc=\", false, function () {\n  return [useLocalPersistState, useLocalPersistState];\n});\n\n_c = SentenceBox;\nexport default SentenceBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SentenceBox\");","map":{"version":3,"sources":["C:/Users/GIGA/Desktop/eletype-frontend-main/src/components/features/SentenceBox/SentenceBox.js"],"names":["React","useState","useMemo","useEffect","sentencesGenerator","Stack","Grid","Box","IconButton","RestartAltIcon","DEFAULT_SENTENCES_COUNT","TEN_SENTENCES_COUNT","FIFTEEN_SENTENCES_COUNT","RESTART_BUTTON_TOOLTIP_TITLE","useLocalPersistState","ENGLISH_MODE","CHINESE_MODE","ENGLISH_SENTENCE_MODE_TOOLTIP_TITLE","CHINESE_SENTENCE_MODE_TOOLTIP_TITLE","Tooltip","Dialog","DialogTitle","SentenceBoxStats","SentenceBox","sentenceInputRef","handleInputFocus","isFocusedMode","sentencesCountConstant","setSentencesCountConstant","language","setLanguage","openRestart","setOpenRestart","EnterkeyPressReset","e","keyCode","preventDefault","reset","handleTabKeyOpen","getSentencesCountButtonClassName","buttonSentencesCountConstant","getLanguageButtonClassName","buttonLanguage","status","setStatus","time","setTime","timeRunning","setTimeRunning","interval","setInterval","prevTime","clearInterval","sentencesDict","setSentencesDict","menuEnabled","sentences","map","val","currSentenceIndex","setCurrSentenceIndex","currSentence","currInput","setCurrInput","rawKeyStroke","setRawKeyStroke","wpm","newSentencesCountConstant","newLanguage","current","focus","value","setStats","correct","incorrect","extra","start","stats","checkAndUpdateStats","newStats","i","length","deltaCharDifference","handleKeyDown","getCharClassName","idx","char","isOnComposition","isChrome","window","chrome","handleComposition","type","currentTarget","HTMLInputElement","handleChange","split","style","backgroundColor","boxShadow"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { sentencesGenerator } from \"../../../scripts/sentencesGenerator\";\nimport { Stack } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport IconButton from \"../../utils/IconButton\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport {\n  DEFAULT_SENTENCES_COUNT,\n  TEN_SENTENCES_COUNT,\n  FIFTEEN_SENTENCES_COUNT,\n  RESTART_BUTTON_TOOLTIP_TITLE\n} from \"../../../constants/Constants\";\nimport useLocalPersistState from \"../../../hooks/useLocalPersistState\";\nimport {\n  ENGLISH_MODE,\n  CHINESE_MODE,\n  ENGLISH_SENTENCE_MODE_TOOLTIP_TITLE,\n  CHINESE_SENTENCE_MODE_TOOLTIP_TITLE,\n} from \"../../../constants/Constants\";\nimport { Tooltip } from \"@mui/material\";\nimport { Dialog } from \"@mui/material\";\nimport { DialogTitle } from \"@mui/material\";\nimport SentenceBoxStats from \"./SentenceBoxStats\";\n\nconst SentenceBox = ({ sentenceInputRef, handleInputFocus, isFocusedMode }) => {\n  // local persist timer\n  const [sentencesCountConstant, setSentencesCountConstant] =\n    useLocalPersistState(DEFAULT_SENTENCES_COUNT, \"sentences-constant\");\n\n  // local persist difficulty\n  const [language, setLanguage] = useLocalPersistState(\n    ENGLISH_MODE,\n    \"sentences-language\"\n  );\n\n  // tab-enter restart dialog\n  const [openRestart, setOpenRestart] = useState(false);\n  const EnterkeyPressReset = (e) => {\n    // press enter/or tab to reset;\n    if (e.keyCode === 13 || e.keyCode === 9) {\n      e.preventDefault();\n      setOpenRestart(false);\n      reset(sentencesCountConstant, language);\n    } else {\n      e.preventDefault();\n      setOpenRestart(false);\n    }\n  };\n\n  const handleTabKeyOpen = () => {\n    setOpenRestart(true);\n  };\n\n  const getSentencesCountButtonClassName = (buttonSentencesCountConstant) => {\n    if (buttonSentencesCountConstant === sentencesCountConstant) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  const getLanguageButtonClassName = (buttonLanguage) => {\n    if (language === buttonLanguage) {\n      return \"active-button\";\n    }\n    return \"inactive-button\";\n  };\n\n  // set up game loop status state\n  const [status, setStatus] = useState(\"waiting\");\n\n  // set up stop watch in seconds\n  const [time, setTime] = useState(0);\n\n  // set up stop watch running status\n  const [timeRunning, setTimeRunning] = useState(false);\n\n  // stop watch loop\n  useEffect(() => {\n    let interval;\n    if (timeRunning) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else if (!timeRunning) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timeRunning]);\n\n  // set up sentences\n  const [sentencesDict, setSentencesDict] = useState(() => {\n    return sentencesGenerator(sentencesCountConstant, language);\n  });\n  // enable menu\n  const menuEnabled = !isFocusedMode || status === \"finished\";\n\n  const sentences = useMemo(() => {\n    return sentencesDict.map((e) => e.val);\n  }, [sentencesDict]);\n\n  // set up currSentenceIndex\n  const [currSentenceIndex, setCurrSentenceIndex] = useState(0);\n\n  const currSentence = sentences[currSentenceIndex];\n\n  // set up curr input\n  const [currInput, setCurrInput] = useState(\"\");\n\n  // set up stats kpm\n  const [rawKeyStroke, setRawKeyStroke] = useState(0);\n\n  const wpm = time < 1 ? 0 : ((rawKeyStroke / time) * 60) / 5;\n\n  const reset = (newSentencesCountConstant, newLanguage) => {\n    setStatus(\"watiting\");\n    setSentencesCountConstant(newSentencesCountConstant);\n    setLanguage(newLanguage);\n    setSentencesDict(\n      sentencesGenerator(newSentencesCountConstant, newLanguage)\n    );\n    setTimeRunning(false);\n    setTime(0);\n    setCurrSentenceIndex(0);\n    setCurrInput(\"\");\n    sentenceInputRef.current.focus();\n    sentenceInputRef.current.value = \"\";\n    setRawKeyStroke(0);\n    setStats({\n      correct: 0,\n      incorrect: 0,\n      extra: 0,\n    });\n  };\n\n  const start = () => {\n    if (status === \"finished\") {\n      reset(sentencesCountConstant, language);\n    }\n    if (status !== \"started\") {\n      setStatus(\"started\");\n      setTimeRunning(true);\n    }\n  };\n\n  const [stats, setStats] = useState({\n    correct: 0,\n    incorrect: 0,\n    extra: 0,\n  });\n\n  const checkAndUpdateStats = (currSentence, currInput) => {\n    const newStats = stats;\n    for (let i = 0; i < currSentence.length; i++) {\n      if (currSentence[i] === currInput[i]) {\n        newStats.correct++;\n      } else {\n        newStats.incorrect++;\n      }\n    }\n    const deltaCharDifference = currInput.length - currSentence.length;\n\n    if (deltaCharDifference > 0) {\n      newStats.extra = deltaCharDifference;\n    }\n\n    setStats(newStats);\n  };\n\n  const handleKeyDown = (e) => {\n    const keyCode = e.keyCode;\n    // disable tab key\n    if (keyCode === 9) {\n      e.preventDefault();\n      handleTabKeyOpen();\n      return;\n    }\n    if (status === \"finished\") {\n      e.preventDefault();\n      return;\n    }\n\n    // start the game by typing any thing\n    if (status !== \"started\" && status !== \"finished\") {\n      start();\n      return;\n    }\n\n    setRawKeyStroke(rawKeyStroke + 1);\n\n    // if enter key pressed.\n    // advance to next sentence only if the input val length is equal to the current sentence char count);\n\n    if (keyCode === 13) {\n      if (currInput.length >= sentences[currSentenceIndex].length) {\n        checkAndUpdateStats(currSentence, currInput);\n        if (currSentenceIndex + 1 === sentencesCountConstant) {\n          setStatus(\"finished\");\n          setTimeRunning(false);\n          return;\n        }\n        setCurrSentenceIndex(currSentenceIndex + 1);\n        setCurrInput(\"\");\n        sentenceInputRef.current.value = \"\";\n        return;\n      }\n      return;\n    }\n  };\n\n  const getCharClassName = (idx, char) => {\n    if (idx < currInput.length) {\n      if (currInput[idx] === char) {\n        return \"correct-sentence-char\";\n      }\n      if (char === \" \") {\n        return \"error-sentence-space-char\";\n      }\n      return \"error-sentence-char\";\n    }\n    return \"sentence-char\";\n  };\n\n  let isOnComposition = false;\n\n  const isChrome = !!window.chrome;\n\n  const handleComposition = (e) => {\n    const {\n      type,\n      currentTarget: { value },\n    } = e;\n    if (type === \"compositionend\") {\n      // composition finished\n      isOnComposition = false;\n      if (\n        e.currentTarget instanceof HTMLInputElement &&\n        !isOnComposition &&\n        isChrome\n      ) {\n        setCurrInput(value);\n      }\n    } else {\n      // composition ongoing\n      isOnComposition = true;\n    }\n  };\n\n  const handleChange = (e) => {\n    const {\n      currentTarget: { value },\n    } = e;\n    if (e.currentTarget instanceof HTMLInputElement && !isOnComposition) {\n      setCurrInput(value);\n    }\n  };\n\n  return (\n    <div onClick={handleInputFocus}>\n      <div className=\"type-box-sentence\">\n        <Stack spacing={2}>\n          <div className=\"sentence-display-field\">\n            {currSentence.split(\"\").map((char, idx) => (\n              <span key={\"word\" + idx} className={getCharClassName(idx, char)}>\n                {char}\n              </span>\n            ))}\n          </div>\n          <input\n            key=\"hidden-sentence-input\"\n            ref={sentenceInputRef}\n            type=\"text\"\n            spellCheck=\"false\"\n            className=\"sentence-input-field\"\n            onKeyDown={(e) => handleKeyDown(e)}\n            onCompositionStart={handleComposition}\n            onCompositionUpdate={handleComposition}\n            onCompositionEnd={handleComposition}\n            onChange={handleChange}\n          />\n          {status !== \"finished\" && (\n            <span className=\"next-sentence-display\">\n              {\"->\"} {sentences[currSentenceIndex + 1] ?? \"Press â†µ to finish.\"}\n            </span>\n          )}\n        </Stack>\n      </div>\n      <div className=\"stats\">\n        <SentenceBoxStats\n          countDown={time}\n          wpm={wpm}\n          status={status}\n          stats={stats}\n          rawKeyStrokes={rawKeyStroke}\n        ></SentenceBoxStats>\n\n        <div className=\"restart-button\" key=\"restart-button\">\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Box display=\"flex\" flexDirection=\"row\">\n              <IconButton\n                aria-label=\"restart\"\n                color=\"secondary\"\n                size=\"medium\"\n                onClick={() => {\n                  reset(sentencesCountConstant, language);\n                }}\n              >\n                <Tooltip title={RESTART_BUTTON_TOOLTIP_TITLE}>\n                  <RestartAltIcon />\n                </Tooltip>\n              </IconButton>\n              {menuEnabled && (\n                <>\n                  <IconButton\n                    onClick={() => {\n                      reset(DEFAULT_SENTENCES_COUNT, language);\n                    }}\n                  >\n                    <span\n                      className={getSentencesCountButtonClassName(\n                        DEFAULT_SENTENCES_COUNT\n                      )}\n                    >\n                      {DEFAULT_SENTENCES_COUNT}\n                    </span>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(TEN_SENTENCES_COUNT, language);\n                    }}\n                  >\n                    <span\n                      className={getSentencesCountButtonClassName(\n                        TEN_SENTENCES_COUNT\n                      )}\n                    >\n                      {TEN_SENTENCES_COUNT}\n                    </span>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(FIFTEEN_SENTENCES_COUNT, language);\n                    }}\n                  >\n                    <span\n                      className={getSentencesCountButtonClassName(\n                        FIFTEEN_SENTENCES_COUNT\n                      )}\n                    >\n                      {FIFTEEN_SENTENCES_COUNT}\n                    </span>\n                  </IconButton>\n                  <IconButton>\n                    {\" \"}\n                    <span className=\"menu-separator\"> | </span>{\" \"}\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(sentencesCountConstant, ENGLISH_MODE);\n                    }}\n                  >\n                    <Tooltip title={ENGLISH_SENTENCE_MODE_TOOLTIP_TITLE}>\n                      <span\n                        className={getLanguageButtonClassName(ENGLISH_MODE)}\n                      >\n                        eng\n                      </span>\n                    </Tooltip>\n                  </IconButton>\n                  <IconButton\n                    onClick={() => {\n                      reset(sentencesCountConstant, CHINESE_MODE);\n                    }}\n                  >\n                    <Tooltip title={CHINESE_SENTENCE_MODE_TOOLTIP_TITLE}>\n                      <span\n                        className={getLanguageButtonClassName(CHINESE_MODE)}\n                      >\n                        chn\n                      </span>\n                    </Tooltip>\n                  </IconButton>\n                </>\n              )}\n            </Box>\n          </Grid>\n        </div>\n      </div>\n      <Dialog\n        PaperProps={{\n          style: {\n            backgroundColor: \"transparent\",\n            boxShadow: \"none\",\n          },\n        }}\n        open={openRestart}\n        onKeyDown={EnterkeyPressReset}\n      >\n        <DialogTitle>\n          <div>\n            <span className=\"key-note\"> press </span>\n            <span className=\"key-type\">Tab</span>{\" \"}\n            <span className=\"key-note\">/</span>{\" \"}\n            <span className=\"key-type\">Enter</span>{\" \"}\n            <span className=\"key-note\">to restart</span>\n          </div>\n          <span className=\"key-note\"> press </span>\n          <span className=\"key-type\">any key </span>{\" \"}\n          <span className=\"key-note\">to exit</span>\n        </DialogTitle>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SentenceBox;\n"]},"metadata":{},"sourceType":"module"}